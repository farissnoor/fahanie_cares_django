# Generated by Django 4.2 on 2025-05-18 04:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Constituent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20)),
                ('education_level', models.CharField(blank=True, choices=[('elementary', 'Elementary School'), ('high_school', 'High School'), ('vocational', 'Vocational School'), ('college', 'College'), ('graduate', 'Graduate School'), ('other', 'Other')], max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=100)),
                ('occupation_type', models.CharField(blank=True, choices=[('private_sector', 'Private Sector'), ('public_sector', 'Public Sector'), ('self_employed', 'Self-employed'), ('student', 'Student'), ('unemployed', 'Unemployed'), ('retired', 'Retired'), ('homemaker', 'Homemaker'), ('other', 'Other')], max_length=20)),
                ('household_size', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('is_voter', models.BooleanField(default=True)),
                ('voter_id', models.CharField(blank=True, max_length=50)),
                ('voting_center', models.CharField(blank=True, max_length=255)),
                ('alternate_contact', models.CharField(blank=True, help_text='Emergency contact or alternative contact method', max_length=255)),
                ('bio', models.TextField(blank=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='constituent_profiles/')),
                ('interests', models.TextField(blank=True, help_text="Constituent's interests and concerns")),
                ('language_preference', models.CharField(blank=True, default='English', max_length=50)),
                ('membership_date', models.DateField(blank=True, null=True)),
                ('last_engagement', models.DateField(blank=True, null=True)),
                ('engagement_level', models.PositiveSmallIntegerField(default=0, help_text='1-10 scale of engagement')),
                ('notes', models.TextField(blank=True)),
                ('is_volunteer', models.BooleanField(default=False)),
                ('volunteer_interests', models.TextField(blank=True)),
                ('notion_id', models.CharField(blank=True, help_text='Notion database ID for this constituent', max_length=36)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='constituent_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ConstituentInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('call', 'Phone Call'), ('meeting', 'In-person Meeting'), ('email', 'Email Exchange'), ('social', 'Social Media'), ('event', 'Event Attendance'), ('referral', 'Service Referral'), ('volunteer', 'Volunteer Activity'), ('donation', 'Donation/Contribution'), ('other', 'Other')], max_length=20)),
                ('date', models.DateTimeField()),
                ('description', models.TextField()),
                ('location', models.CharField(blank=True, max_length=255)),
                ('outcome', models.CharField(blank=True, choices=[('resolved', 'Issue Resolved'), ('in_progress', 'In Progress'), ('follow_up', 'Follow-up Required'), ('referred', 'Referred to Agency'), ('no_action', 'No Action Required'), ('other', 'Other')], max_length=20)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_notes', models.TextField(blank=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('notion_id', models.CharField(blank=True, help_text='Notion database ID for this interaction', max_length=36)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('constituent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='constituents.constituent')),
                ('staff_member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='constituent_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ConstituentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('notion_id', models.CharField(blank=True, help_text='Notion database ID for this group', max_length=36)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_constituent_groups', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='groups', to='constituents.constituent')),
            ],
        ),
    ]
